@page "/"
@inject IUnitOfWork _unitOfWork
@inject IMongoUserData _userData
@inject IMongoPollData _pollData
@inject NavigationManager _nav

<PageTitle>Home</PageTitle>

<CascadingValue Value="_loggedInUser">  

    <HomeCards />

</CascadingValue>

@code {

    [CascadingParameter] 
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private UserModel _loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        _loggedInUser = await _userData.GetCurrentUserFromAuthentication(objectId) ?? new();

        if (string.IsNullOrWhiteSpace(objectId)) return;

        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (!objectId.Equals(_loggedInUser.ObjectIdentifier))
        {
            isDirty = true;
            _loggedInUser.ObjectIdentifier = objectId;
        }

        if (!firstName.Equals(_loggedInUser.FirstName))
        {
            isDirty = true;
            _loggedInUser.FirstName = firstName;
        }

        if (!lastName.Equals(_loggedInUser.LastName))
        {
            isDirty = true;
            _loggedInUser.LastName = lastName;
        }

        if (!displayName.Equals(_loggedInUser.DisplayName))
        {
            isDirty = true;
            _loggedInUser.DisplayName = displayName;
        }

        if (!emailAddress.Equals(_loggedInUser.EmailAddress))
        {
            isDirty = true;
            _loggedInUser.EmailAddress = emailAddress;
        }

        if (isDirty)
        {
            if (string.IsNullOrWhiteSpace(_loggedInUser.UserId))
            {
                await _unitOfWork.Users.CreateOne(_loggedInUser);
                return;
            }

            await _userData.UpdateUser(_loggedInUser);
        }
    }
}
