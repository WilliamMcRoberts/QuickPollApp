@page "/"
@inject IUnitOfWork _unitOfWork
@inject NavigationManager _nav
@inject PersistentComponentState ApplicationState
@implements IDisposable


<PageTitle>Quick Poll - Home</PageTitle>
<HeadContent>
    <meta name="description" content="Home page for Quick Poll, choices for expoloring polls, searching for a poll, or viewing site info" />
    <link rel="sitemap" type="application/xml" title="Sitemap" href="@(_nav.BaseUri)sitemap.xml" />
    <link rel="alternate" type="application/rss+xml" href="@(_nav.BaseUri)atom.xml">
    <link rel="canonical" href="@(_nav.BaseUri)info" />
</HeadContent>

<CascadingValue Value="_loggedInUser">  

    <HomeCardsComponent />

</CascadingValue>

@code {

    [CascadingParameter] 
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private PersistingComponentStateSubscription _subscription;

    private UserModel _loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(PersistUser);

        if (ApplicationState.TryTakeFromJson<UserModel>("userData", out var stored))
            _loggedInUser = stored;
        else
            await LoadAndVerifyUser();

    }

    private Task PersistUser()
    {
        ApplicationState.PersistAsJson("userData", _loggedInUser);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        _loggedInUser = await _unitOfWork.Users.GetCurrentUserFromAuthentication(objectId) ?? new();


        if (string.IsNullOrWhiteSpace(objectId)) return;

        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (!objectId.Equals(_loggedInUser.ObjectIdentifier))
        {
            isDirty = true;
            _loggedInUser.ObjectIdentifier = objectId;
        }

        if (!firstName.Equals(_loggedInUser.FirstName))
        {
            isDirty = true;
            _loggedInUser.FirstName = firstName;
        }

        if (!lastName.Equals(_loggedInUser.LastName))
        {
            isDirty = true;
            _loggedInUser.LastName = lastName;
        }

        if (!displayName.Equals(_loggedInUser.DisplayName))
        {
            isDirty = true;
            _loggedInUser.DisplayName = displayName;
        }

        if (!emailAddress.Equals(_loggedInUser.EmailAddress))
        {
            isDirty = true;
            _loggedInUser.EmailAddress = emailAddress;
        }

        if (isDirty)
        {
            if (string.IsNullOrWhiteSpace(_loggedInUser.UserId))
            {
                await _unitOfWork.Users.CreateOneAsync(_loggedInUser);
                return;
            }

            await _unitOfWork.Users.ReplaceOneAsync(_loggedInUser.UserId, _loggedInUser, "UserId");
        }
    }
}
