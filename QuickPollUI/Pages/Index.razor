@page "/"
@inject IMongoUserData _userData
@inject NavigationManager _nav
<PageTitle>Home</PageTitle>

<div class="card-container">
    <div class="card">
        <div class="face face1">
            <div class="content">
            <i class="fa-solid fa-square-poll-horizontal"></i> 
            <h3>Explore All Polls</h3>
            </div>
        </div>
        <div class="face face2">
            <div class="content">
                <p> Create a poll or explore polls that have already been created, including active and finished polls.</p>
                <a class="nav-btn-card" @onclick="NavigateToPolls" type="button">Let's Go!</a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="face face1">
            <div class="content">
                <i class="fa-solid fa-magnifying-glass"></i>                    
                <h3>Find A Poll</h3>
            </div>
        </div>
        <div class="face face2">
            <div class="content">
                <div>
                    <p> Enter your poll id, then click "Find" to navigate to your poll.</p>
                    <input class="id-input" @bind="@pollId" @bind:event="oninput"/>
                </div>
                <a @onclick="FindAPoll" class="nav-btn-card" type="button">Find</a>
            </div>
        </div>
    </div>


    <div class="card">
        <div class="face face1">
            <div class="content">
                <i class="fa-solid fa-info"></i>                    
                <h3>Quick Poll Info</h3>
            </div>
        </div>
        <div class="face face2">
            <div class="content">
                <p>Info about Quick Poll including support links and contact info.</p>
                <a class="nav-btn-card" @onclick="NavigateToInfo" type="button">Take Me There</a>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] 
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [CascadingParameter]
    public ModalWrapper ModalWrapperComponent { get; set; }

    MouseEventArgs mouseArgs;

    private UserModel _loggedInUser;

    private string pollId;

    protected override async Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        _loggedInUser = await _userData.GetCurrentUserFromAuthentication(objectId) ?? new();

        if (string.IsNullOrWhiteSpace(objectId)) return;

        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

        bool isDirty = false;

        if (!objectId.Equals(_loggedInUser.ObjectIdentifier))
        {
            isDirty = true;
            _loggedInUser.ObjectIdentifier = objectId;
        }

        if (!firstName.Equals(_loggedInUser.FirstName))
        {
            isDirty = true;
            _loggedInUser.FirstName = firstName;
        }

        if (!lastName.Equals(_loggedInUser.LastName))
        {
            isDirty = true;
            _loggedInUser.LastName = lastName;
        }

        if (!displayName.Equals(_loggedInUser.DisplayName))
        {
            isDirty = true;
            _loggedInUser.DisplayName = displayName;
        }

        if (!emailAddress.Equals(_loggedInUser.EmailAddress))
        {
            isDirty = true;
            _loggedInUser.EmailAddress = emailAddress;
        }

        if (isDirty)
        {
            if (string.IsNullOrWhiteSpace(_loggedInUser.UserId))
            {
                await _userData.CreateUser(_loggedInUser);
                return;
            }

            await _userData.UpdateUser(_loggedInUser);
        }
    }

    private void ShowLoginModal(MouseEventArgs mouseArgs)
    {
        Dictionary<string, object> ParameterArguments = new();

        ModalWrapperComponent.ShowModal(mouseArgs, typeof(Login), ParameterArguments, true);
    }

    private void NavigateToInfo()
    {
        if (string.IsNullOrWhiteSpace(_loggedInUser.UserId)) 
        {
            ShowLoginModal(mouseArgs);
            return;
        }

        _nav.NavigateTo("/polls");
    }

    private void NavigateToPolls()
    {
        if (string.IsNullOrWhiteSpace(_loggedInUser.UserId))
        {
            ShowLoginModal(mouseArgs);
            return;
        }

        _nav.NavigateTo("/polls");
    }

    private void FindAPoll()
    {
        if (string.IsNullOrWhiteSpace(_loggedInUser.UserId))
        {
            ShowLoginModal(mouseArgs);
            return;
        }

        _nav.NavigateTo($"/polls/{pollId}");
    }
}

<style>

    .id-input {
        margin: .25em auto;
    }

    .nav-btn-card {
        font-weight:900;
    }

    i {
        margin-bottom: .5em;
    }

    .card-container {
        width: 1000px;
        position: relative;
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        cursor: text;
        margin: 6em auto;
    }

        .card-container .card {
            position: relative;
            background: transparent;
            border: none;
        }

            .card-container .card .face {
                width: 300px;
                height: 200px;
                transition: .4s;
            }

                .card-container .card .face.face1 {
                    position: relative;
                    background: #333;
                    display: flex;
                    justify-content: center;
                    align-content: center;
                    align-items: center;
                    z-index: 1;
                    transform: translateY(100px);
                }

            .card-container .card:hover .face.face1 {
                transform: translateY(0);
                box-shadow: inset 0 0 60px whitesmoke, inset 20px 0 80px #f0f, inset -20px 0 80px #0ff, inset 20px 0 300px #f0f, inset -20px 0 300px #0ff, 0 0 50px #fff, -10px 0 80px #f0f, 10px 0 80px #0ff;
            }

            .card-container .card .face.face1 .content {
                opacity: .2;
                transition: 0.5s;
                text-align: center;
            }

            .card-container .card:hover .face.face1 .content {
                opacity: 1;
            }

            .card-container .card .face.face1 .content i {
                font-size: 3em;
                color: white;
                display: inline-block;
            }

            .card-container .card .face.face1 .content h3 {
                font-size: 1em;
                color: white;
                text-align: center;
            }

            .card-container .card .face.face1 .content a {
                transition: .5s;
            }

    .card-container .card .face.face2 {
                position: relative;
                background: whitesmoke;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
                box-sizing: border-box;
                box-shadow: 0 20px 50px rgba(0,0,0,.8);
                transform: translateY(-100px);
            }

            .card-container .card:hover .face.face2 {
                transform: translateY(0);
            }

    .card-container .card .face.face2 .content p, a {
                font-size: 10pt;
                margin: 0;
                padding: 0;
                color: #333;
            }

    .card-container .card .face.face2 .content a {
                text-decoration: none;
                color: black;
                box-sizing: border-box;
                outline: 1px dashed #333;
                padding: 10px;
                margin: 15px 0 0;
                display: inline-block;
            }

    .card-container .card .face.face2 .content a:hover {
                    background: #333;
                    color: whitesmoke;
                    box-shadow: inset 0px 0px 10px rgba(0,0,0,0.5);
                }
</style>