@page "/polls/{PollId}"
@inject IMongoUserData _userData
@inject IPollService _pollService
@inject NavigationManager _nav

<div class="question-container">
    <h3 class="poll-question-text">@_poll?.Question</h3>
    <p>Total Votes: @_poll?.OptionsList.GetTotalVotes()</p>
    @switch (_poll?.IsComplete)
    {
        case false:
            <CountDownTimer Poll="@_poll" />
            break;
        case true:
            <div class="timer">
                <p class="finished">Poll Finished</p>
            </div>
            break;
    }
</div>
@foreach (var option in _poll?.OptionsList)
{
    <div class="option-container">
        <Tooltip Text="@(_poll.UsersVoted.Contains(_loggedInUser?.UserId) &&
             option.PollOptionUsersVoted.Contains(_loggedInUser?.UserId) ? $"Undo Vote {option.PollOptionName}" : _poll.UsersVoted.Contains(_loggedInUser?.UserId) ? "You've Already Voted" : $"Vote {option.PollOptionName}")"
             BgColor="#BF40BF">
            <div @onclick="(() => option.VoteOrUndoVoteForOption(_poll, _loggedInUser, _pollService))" class="answer col-lg-8">
                <div class="percent @(_poll.OptionsList.IndexOf(option) % 2 == 0 ? "percent-even" : "percent-odd")" style="width: @(option.PollOptionVotes.GetPercentage(_poll.OptionsList.GetTotalVotes()))%"></div>
                <span class="percent-block">
                    <div> @option.PollOptionName | @option.PollOptionVotes votes </div>
                    <div style="color: @(_poll.OptionsList.IndexOf(option) % 2 == 0 ? "#d91b42" : "#45c496")">@(option.PollOptionVotes.GetPercentage(_poll.OptionsList.GetTotalVotes()))%</div>
                </span>
            </div>
        </Tooltip>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string PollId { get; set; }

    private PollModel _poll;

    private UserModel _loggedInUser;

    private HubConnection _pollHubConnection;

    private List<PollModel> _allPolls = new();

    protected override async Task OnInitializedAsync()
    {
        _poll = await Task.FromResult(_pollService.AllPolls.Where(p => p.PollId.ToString() == PollId).FirstOrDefault());

        _pollHubConnection = new HubConnectionBuilder()
                    .WithUrl(_nav.ToAbsoluteUri("/pollhub"))
                    .WithAutomaticReconnect()
                    .Build();

        _pollHubConnection.On<string, List<PollModel>>("getAllPolls", (from, allPolls) =>
        {
            _allPolls = allPolls;
            _poll = _allPolls.Where(p => p.PollId.ToString() == PollId).FirstOrDefault();
            InvokeAsync(StateHasChanged);
        });

        _pollHubConnection.On<string, PollModel>("getPoll", (from, poll) =>
        {
            var pollToUpdate = _allPolls.Where(p => p.PollId == poll.PollId).FirstOrDefault();
            if (pollToUpdate is not null)
            {
                int index = _allPolls.IndexOf(pollToUpdate);
                _allPolls[index] = poll;
            }
            InvokeAsync(StateHasChanged);
        });

        await _pollHubConnection.StartAsync();

        _loggedInUser = await GetLoggedInUser();
    }

    private async Task<UserModel> GetLoggedInUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        return await _userData.GetCurrentUserFromAuthentication(objectId);
    }
}

<style>

    .option-container {
        position: relative;
        border: 2px solid green;
        width: 70%;
        margin: 0 auto;
    }

    .poll-question-text {
        margin-bottom: 1em;
    }

    .question-container {
        margin: 2em auto;
        text-align: center;
        padding: .5em;
        border: 2px solid red;
    }

</style>
