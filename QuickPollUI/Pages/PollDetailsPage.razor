@page "/polls/{PollId}"
@inject IUnitOfWork _unitOfWork
@inject IPollManager _pollManager
@inject NavigationManager _nav
@implements IAsyncDisposable

<PageTitle>Poll Details</PageTitle>

@if (_poll is not null)
{
    <div class="question-container">
        <h3 class="poll-question-text">@_poll.Question</h3>
        <p class="vote-text">TOTAL VOTES : @_poll.OptionsList.GetTotalVotes()</p>

        <CountDownTimerComponent Poll="@_poll" PollComplete="HandlePollComplete" PollHasStarted="HandlePollHasStarted" />

    </div>

    @foreach (var option in _poll?.OptionsList)
    {
        <div class="option-container">
            <Tooltip Text="@GetTooltipText(option)" BgColor="#f0f">
                <div @onclick="(() => VoteOrUndoVoteForOption(option))" style="background:  @GetAnswerBackgroundColor(option);" class="answer col-lg-8">
                    <div class="percent @GetPercentClass(option)" style="width: @(option.PollOptionVotes.GetPercentage(_poll.OptionsList.GetTotalVotes()))%"></div>
                    <span class="percent-block">
                        <div class="option-text"> @option.PollOptionName | @option.PollOptionVotes @(@option.PollOptionVotes != 1 ? "Votes" : "Vote") </div>
                        <div class="percent-text" style="color: @GetPercentTextColor(option)"> @(option.PollOptionVotes.GetPercentage(_poll.OptionsList.GetTotalVotes()))% </div>
                    </span>
                </div>
            </Tooltip>
        </div>
    }
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string PollId { get; set; }

    private int totalConnections;

    private PollModel _poll;

    private UserModel _loggedInUser;

    private HubConnection _pollHubConnection;

    private List<PollModel> _allPolls = new();

    protected override async Task OnInitializedAsync()
    {
        _poll = await _pollManager.GetPollById(PollId);

        _loggedInUser = await GetLoggedInUser();

        await ConnectToPollHub();
    }

    private void VoteOrUndoVoteForOption(PollOptionModel pollOption) =>
        _pollManager.VoteOrUndoVoteForOption(pollOption, _poll, _loggedInUser);

    private async Task HandlePollComplete()
    {
        _poll.IsComplete = true;
        await _pollManager.UpdatePoll(_poll);
    }

    private async Task HandlePollHasStarted()
    {
        _poll.HasStarted = true;
        await _pollManager.UpdatePoll(_poll);
    }

    private string GetAnswerBackgroundColor(PollOptionModel option) =>
        _poll.OptionsList.IndexOf(option) % 2 == 0 ? "rgba(217, 27, 66, 0.2)" : "rgba(69, 196, 150, 0.2)";

    private string GetPercentTextColor(PollOptionModel option) =>
        _poll.OptionsList.IndexOf(option) % 2 == 0 ? "#d91b42" : "#45c496";

    private string GetPercentClass(PollOptionModel option) =>
        _poll.OptionsList.IndexOf(option) % 2 == 0 ? "percent-even" : "percent-odd";

    private string GetTooltipText(PollOptionModel option) =>
        option.GetTooltipText(_poll, _loggedInUser);

    private async Task<UserModel> GetLoggedInUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        return await _unitOfWork.Users.GetOneAsync(u => u.ObjectIdentifier == objectId);
    }

    private async Task ConnectToPollHub()
    {
        _pollHubConnection = new HubConnectionBuilder()
                   .WithUrl(_nav.ToAbsoluteUri("/pollhub"))
                   .WithAutomaticReconnect()
                   .Build();

        _pollHubConnection.On<string, List<PollModel>>("getAllPolls", (from, allPolls) =>
        {
            _allPolls = allPolls;
            _poll = _allPolls.Where(p => p.PollId.ToString() == PollId).FirstOrDefault();
            InvokeAsync(StateHasChanged);
        });

        _pollHubConnection.On<int>("ReceiveCount", count =>
        {
            totalConnections = count;
            InvokeAsync(StateHasChanged);
        });

        await _pollHubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_pollHubConnection is not null)
        {
            await _pollHubConnection.DisposeAsync();
        }
    }
}

<style>

    .percent-even {
        background: rgba(217, 27, 66, 0.3);
        border-left: 4px solid #d91b42;
    }

    .percent-odd {
        background: rgba(69, 196, 150, 0.3);
        border-left: 4px solid #45c496;
    }

    p {
        font-size: 14px;
        color: #aaa;
    }

    .percent {
        height: 100%;
        position: absolute;
        box-sizing: border-box;
        transition: .25s ease;
    }

    .percent-block {
        display: flex;
        justify-content: space-between;
        padding: 10px 20px;
    }

    .answer {
        cursor: pointer;
        margin: .25em auto;
        position: relative;
    }

    .option-text {
        font-weight: 700;
        font-family: 'Chakra Petch', sans-serif;
        color: #fff;
        text-shadow: 1px 2px 1px #000, 1px 2px 2px #000, 1px 2px 3px #000, 1px 2px 4px #000;
    }

    .percent-text {
        font-weight: 900;
        text-shadow: 1px 2px 1px #000, 1px 2px 2px #000, 1px 2px 3px #000, 1px 2px 4px #000;
        letter-spacing: 1px;
    }

    .finished {
        font-weight: 700;
    }

    .vote-text {
        margin-bottom: 2em;
        font-weight: 700;
        font-size: 1em;
    }

    .option-container {
        width: 90%;
        margin: 0 auto;
    }

    .poll-question-text {
        margin-bottom: 1em;
        font-family: 'Chakra Petch', sans-serif;
        color: #fff;
        text-shadow: 1px 2px 1px #000, 1px 2px 2px #000, 1px 2px 3px #000, 1px 2px 4px #000;
    }

    .question-container {
        margin: 2em auto;
        text-align: center;
        padding: 1em;
    }

    @@media(max-width: 700px) {
        .percent-block {
            height: 4em;
        }

        .percent-text {
            margin-top: .5em;
        }
    }

    @@media(max-width: 360px) {
        .percent-block {
            height: 6em;
        }

        .percent-text {
            margin-top: 1.5em;
        }
    }

</style>
