@page "/polls/{PollId}"
@inject IMongoUserData _userData
@inject IPollService _pollService

<div class="question-container">
    <h3 class="poll-question-text">@_poll.Question</h3>
    <p>Total Votes: @GetTotalVotes(_poll.OptionsList)</p>
    @switch (_poll.IsComplete)
    {
        case false:
            <CountDownTimer Poll="@_poll" Position="relative "/>
            break;
        case true:
            <div class="timer">
                <p class="finished">Poll Finished</p>
            </div>
            break;
    }
</div>
@foreach (var option in _poll.OptionsList)
{
    <div class="option-container">
        <Tooltip Text="@(_poll.UsersVoted.Contains(_loggedInUser?.UserId) &&
             option.PollOptionUsersVoted.Contains(_loggedInUser?.UserId) ? $"Undo Vote {option.PollOptionName}" : _poll.UsersVoted.Contains(_loggedInUser?.UserId) ? "You've Already Voted" : $"Vote {option.PollOptionName}")"
             BgColor="#BF40BF">
            <div @onclick="(() => VoteForOption(_poll, option))" class="answer col-lg-8">
                <div class="percent @(_poll.OptionsList.IndexOf(option) % 2 == 0 ? "percent-even" : "percent-odd")" style="width: @(GetPercentage(option.PollOptionVotes, GetTotalVotes(_poll.OptionsList)))%"></div>
                <span class="percent-block">
                    <div> @option.PollOptionName | @option.PollOptionVotes votes </div> 
                    <div style="color: @(_poll.OptionsList.IndexOf(option) % 2 == 0 ? "#d91b42" : "#45c496")">@(GetPercentage(option.PollOptionVotes, GetTotalVotes(_poll.OptionsList)))%</div> 
                </span>
            </div>
        </Tooltip>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string PollId { get; set; }

    private PollModel _poll;

    private UserModel _loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        _poll = _pollService.AllPolls.Where(p => p.PollId.ToString() == PollId).FirstOrDefault();
        _loggedInUser = await GetLoggedInUser();
    }

    private int GetTotalVotes(List<PollOptionModel> pollOptions)
    {
        int total = 0;

        foreach (var option in pollOptions)
        {
            total += option.PollOptionVotes;
        }

        return total;
    }

    private async Task VoteForOption(PollModel poll, PollOptionModel pollOption)
    {
        //if (poll.IsComplete || !poll.HasStarted || poll.PollCreatorId == LoggedInUser.UserId)
        //    return;

        if (poll.IsComplete || !poll.HasStarted)
            return;

        if (poll.UsersVoted.Contains(_loggedInUser?.UserId)
            && pollOption.PollOptionUsersVoted.Contains(_loggedInUser?.UserId))
        {
            await UndoVote(poll, pollOption);
            return;
        }

        if (poll.UsersVoted.Contains(_loggedInUser?.UserId)) return;

        poll.UsersVoted.Add(_loggedInUser?.UserId);

        pollOption.PollOptionUsersVoted.Add(_loggedInUser?.UserId);

        poll.OptionsList[poll.OptionsList.IndexOf(pollOption)].PollOptionVotes++;

        await _pollService.UpdatePoll(poll);
    }

    private async Task UndoVote(PollModel poll, PollOptionModel pollOption)
    {
        poll.UsersVoted.Remove(_loggedInUser?.UserId);

        pollOption.PollOptionUsersVoted.Remove(_loggedInUser?.UserId);

        poll.OptionsList[poll.OptionsList.IndexOf(pollOption)].PollOptionVotes--;

        await _pollService.UpdatePoll(poll);
    }

    private decimal GetPercentage(int votes, int totalVotes)
    {
        if (totalVotes == 0) return 0;
        return Math.Round((100 / (decimal)totalVotes * votes), 2);
    }

    private async Task<UserModel> GetLoggedInUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        return await _userData.GetCurrentUserFromAuthentication(objectId);
    }
}

<style>

    .option-container {
        position: relative;
        border: 2px solid green;
        width: 70%;
    }

    .poll-question-text {
        margin-bottom: 1em;
    }

    .question-container {
        margin: 2em auto;
        text-align: center;
        padding: .5em;
        border: 2px solid red;
    }

</style>
