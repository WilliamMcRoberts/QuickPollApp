@page "/polls"
@inject NavigationManager _nav
@inject IPollService _pollService
@inject IMongoUserData _userData

<CascadingValue Value="_loggedInUser">

    <Tabs ActiveItem="@activeTab" Items="@tabs" HandleTabChange="HandleTabChange" />

    @switch (activeTab)
    {
        case "All Polls": 
            <SearchBar AllPolls="_allPolls" HandleSearchInput="HandleSearchInput" />
            <PollList PollsToDisplay="_pollsToDisplay" />
            break;
        case "Create Poll":
            <CreatePollForm HandleAdd="HandleAdd" />
            break;
    }

</CascadingValue>

@code {
    private HubConnection _pollHubConnection;

    private List<PollModel> _allPolls = new();
    private List<PollModel> _pollsToDisplay = new();
    private List<PollModel> _finishedPolls = new();

    private string[] tabs = new string[2] { "All Polls", "Create Poll" };
    private string activeTab = "All Polls";

    private UserModel _loggedInUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loggedInUser = await GetLoggedInUser();
            
            _pollHubConnection = new HubConnectionBuilder()
                        .WithUrl(_nav.ToAbsoluteUri("/pollhub"))
                        .WithAutomaticReconnect()
                        .Build();

            _pollHubConnection.On<string, List<PollModel>>("getAllPolls", (from, allPolls) =>
            {
                _allPolls = allPolls;
                _pollsToDisplay = _allPolls;
                InvokeAsync(StateHasChanged);
            });

            //pollHubConnection.On<DateTime, List<PollModel>>("getActivePolls", (time, activePolls) =>
            //{
            //    var timeUpdated = time;
            //    _activePolls = activePolls;
            //    InvokeAsync(StateHasChanged);
            //});

            //pollHubConnection.On<DateTime, List<PollModel>>("getFinishedPolls", (time, finishedPolls) =>
            //{
            //    var timeUpdated = time;
            //    _finishedPolls = finishedPolls;
            //    InvokeAsync(StateHasChanged);
            //});

            _pollHubConnection.On<Guid, PollModel>("getPoll", (pollId, poll) =>
            {
                var pollToUpdate = _allPolls.Where(p => p.PollId == pollId).FirstOrDefault();
                if (pollToUpdate is not null)
                {
                    int index = _allPolls.IndexOf(pollToUpdate);
                    _allPolls[index] = poll;
                }
                InvokeAsync(StateHasChanged);
            });

            await _pollHubConnection.StartAsync();
            await _pollService.BroadcastAllPolls();
        }
    }

    private void HandleSearchInput(List<PollModel> filteredPolls) => _pollsToDisplay = filteredPolls;

    private void HandleTabChange(string tab) => activeTab = tab;

    private void HandleAdd() => activeTab = "All Polls";

    private async Task<UserModel> GetLoggedInUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        return await _userData.GetCurrentUserFromAuthentication(objectId);
    }
}

<style>
   
</style>
