@page "/polls"
@attribute [Authorize]
@inject NavigationManager _nav
@inject IPollManager _pollManager
@inject IUnitOfWork _unitOfWork
@implements IAsyncDisposable

<PageTitle>Polls</PageTitle>

<CascadingValue Value="_loggedInUser">
    
    <Tabs ActiveItem="@activeTab" Items="@tabs" HandleTabChange="HandleTabChange" />

    <div class="content-container">
        @switch (activeTab)
        {
            case "All Polls": 
                <div class="user-created-checkbox-container">
                    <label class="user-created-checkbox-label">My Polls Only</label>
                    <input class="user-created-checkbox-input" type="checkbox" @bind="@userCreatedOnly" />
                </div>
                <div class="search-bar-container">
                    <SearchBarComponent AllPolls="_allPolls" HandleSearchInput="HandleSearchInput" />
                </div>
                <PollListComponent PollsToDisplay="GetPollsToDisplay()" />
                
                break;
            case "Create Poll":
                <CreatePollFormComponent HandleAdd="HandleAdd" />
                break;
        }
    </div>

</CascadingValue>

@code {
    private HubConnection _pollHubConnection;

    private int totalConnections;
    private bool userCreatedOnly;

    private List<PollModel> _allPolls = new();
    private List<PollModel> _pollsToDisplay = new();

    private string[] tabs = new string[2] { "All Polls", "Create Poll" };
    private string activeTab = "All Polls";

    private UserModel _loggedInUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await GetLoggedInUser();

        await ConnectToPollHubAndBraodcastAllPolls();
    }

    private void HandleSearchInput(IEnumerable<PollModel> filteredPolls) =>
        _pollsToDisplay = filteredPolls.ToList();

    private void HandleTabChange(string tab) => activeTab = tab;

    private void HandleAdd() => activeTab = "All Polls";

    

    private List<PollModel> GetPollsToDisplay() =>
        userCreatedOnly ? _pollsToDisplay.Where(p => _loggedInUser.PollIds.Contains(p.PollId.ToString())).ToList() : _pollsToDisplay;

    private async Task<UserModel> GetLoggedInUser()
    {
        var authState = await AuthenticationStateTask;
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        return await _unitOfWork.Users.GetCurrentUserFromAuthentication(objectId);
    }

    private async Task ConnectToPollHubAndBraodcastAllPolls()
    {
        _pollHubConnection = new HubConnectionBuilder()
                            .WithUrl(_nav.ToAbsoluteUri("/pollhub"))
                            .WithAutomaticReconnect()
                            .Build();

        _pollHubConnection.On<string, List<PollModel>>("getAllPolls", (from, allPolls) =>
        {
            _allPolls = allPolls;
            _pollsToDisplay = _allPolls;
            InvokeAsync(StateHasChanged);
        });

        _pollHubConnection.On<int>("ReceiveCount", count =>
        {
            totalConnections = count;
            InvokeAsync(StateHasChanged);
        });

        await _pollHubConnection.StartAsync();
        await _pollManager.BroadcastAllPolls();
    }

    public async ValueTask DisposeAsync()
    {
        if (_pollHubConnection is not null)
        {
            await _pollHubConnection.DisposeAsync();
        }
    }
}

<style>

     .user-created-checkbox-input {
        transform: scale(1.5);
        margin: 0 .5em;
        accent-color: #BF40BF;
        width: auto;
    }

    .user-created-checkbox-container {
        margin: 3em auto;
        position: absolute;
        left: 12.5%;
        top: 12%;
    }

    .user-created-checkbox-label {
        font-size: 1em;
        margin: .5em .25em;
        width: auto;
        color: #aaa;
        font-weight: 700;
    }

    .content-container {
        padding: 0 1em;
    }

    .search-bar-container {
        margin: 3em auto;
        position: absolute;
        right: 12.5%;
        top: 12%;
    }

    @@media(max-width: 890px) {
        .search-bar-container {
            position: relative;
            display: flex;
            justify-content: center;
            margin: 0 auto;
            right: auto;
            top: auto;
            margin-bottom: 2em;
        }
    }

    @@media(max-width: 700px) {
        .user-created-checkbox-container {
            position: relative;
            display: flex;
            justify-content: center;
            margin: 0 auto;
            left: auto;
            top: auto;
            margin-bottom: 2em;
        }

        .user-created-checkbox-input {
            box-shadow: none;
        }
    }

</style>
