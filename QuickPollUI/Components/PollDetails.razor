@inject IPollService _pollService
@inject NavigationManager _nav

<Card>
    <div class="poll">
        <h3>@Poll.Question</h3>
        <p>Total Votes: @Poll.OptionsList.GetTotalVotes()</p>
        @switch (Poll.IsComplete)
        {
            case false:
                <div class="timer-container">
                    <CountDownTimer Poll="@Poll"/>
                </div>    
                break;
            case true:
                <div class="timer-container">
                    <p>Poll Finished</p>
                </div>
                break;
        }
        @foreach (var option in Poll.OptionsList)
        {
            <div class="option-container">
                <Tooltip Text="@(Poll.UsersVoted.Contains(LoggedInUser.UserId) && 
                    option.PollOptionUsersVoted.Contains(LoggedInUser.UserId) ? $"Undo Vote {option.PollOptionName}" : Poll.UsersVoted.Contains(LoggedInUser.UserId) ? "You've Already Voted" : $"Vote {option.PollOptionName}")"
                     BgColor="#f0f">

                    <div @onclick="(() => option.VoteOrUndoVoteForOption(Poll, LoggedInUser, _pollService))" class="answer">
                        <div class="percent @(Poll.OptionsList.IndexOf(option) % 2 == 0 ? "percent-even" : "percent-odd")" style="width: @(option.PollOptionVotes.GetPercentage(Poll.OptionsList.GetTotalVotes()))%"></div>
                        <span class="percent-block">
                            <div> @option.PollOptionName | @option.PollOptionVotes votes </div>
                            <div style="color: @(Poll.OptionsList.IndexOf(option) % 2 == 0 ? "#d91b42" : "#45c496")">@(option.PollOptionVotes.GetPercentage(Poll.OptionsList.GetTotalVotes()))%</div>
                        </span>
                    </div>
                </Tooltip>
            </div>
        }
    </div>
    <div class="delete-details">
        @if(Poll.PollCreatorId == LoggedInUser.UserId)
        {
            <Button 
                Disabled="@(Poll.PollCreatorId != LoggedInUser?.UserId)" 
                HandleClick="(() => Poll.DeletePoll(LoggedInUser, _pollService))">
                Delete
            </Button>
        }
        <Button 
            HandleClick="(() => GoToPollDetailsPage(Poll.PollId))" 
            ClassType="secondary"> 
            Details 
        </Button>
    </div>
    
</Card>

@code {
    [CascadingParameter]
    public PollModel Poll { get; set; }

    [CascadingParameter]
    public UserModel LoggedInUser { get; set; }


    private void GoToPollDetailsPage(Guid pollId) =>
        _nav.NavigateTo($"/polls/{pollId}");
}

<style>

    .timer-container {
        margin: 0 auto;
        width: 70%;
    }

    .option-container {
        position: relative;
    }

    .option-votes {
        display: flex;
        justify-content: space-between;
    }

    .poll {
        margin-bottom: 3em;
    }

    .delete-details {
        text-align: center;
        position: absolute;
        bottom: 10px;
        display:flex;
        justify-content: space-between;
    }

    h3 {
        margin: 0 auto;
        color: #555;
    }

</style>
