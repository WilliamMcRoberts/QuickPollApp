@implements IDisposable
<div class="timer">

    @if(!Poll.IsComplete)
    {
        if(Poll.TimeLimit is not null && Poll.StartTime < DateTime.Now)
        {
            <p class="time-text">TIME LEFT</p>
            <div class="times">
                <p class="time-unit-day">  @timeLimitDays.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-hour">  @timeLimitHours.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-min">   @timeLimitMinutes.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-sec">  @timeLimitSeconds.ToString("00") </p>
            </div>
        }
        else if (Poll.TimeLimit is not null && Poll.StartTime > DateTime.Now)
        {
            <p class="time-text">STARTS IN</p>
            <div class="times">
                <p class="time-unit-day">  @startsInDays.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-hour">  @startsInHours.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-min">  @startsInMinutes.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-sec">  @startsInSeconds.ToString("00") </p>
            </div>
        }
        else
        {
            <p class="clock-text">NO TIME LIMIT</p>
        }
    }

    else
    {
        <p class="clock-text">POLL FINISHED</p>
    }

</div>

@code {
    [Parameter]
    public PollModel Poll { get; set; }

    [Parameter]
    public EventCallback PollComplete { get; set; }

    [Parameter]
    public EventCallback PollHasStarted { get; set; }

    private Timer _timeLimitTimer = new(1000);

    private Timer _startsInTimer = new(1000);

    private int timeLimitDays, timeLimitHours, timeLimitMinutes, timeLimitSeconds;

    private int startsInDays, startsInHours, startsInMinutes, startsInSeconds;

    private DateTime? timeFinished => Poll.TimeLimit is not null ? Poll.StartTime + Poll.TimeLimit : null;

    protected override async Task OnInitializedAsync()
    {

        _timeLimitTimer.Elapsed += new ElapsedEventHandler(CountDownTimeLimit);
        _startsInTimer.Elapsed += new ElapsedEventHandler(CountDownStartsIn);
        if (Poll.StartTime < DateTime.Now)
        {
            Poll.HasStarted = true;
            _timeLimitTimer.Start();
        }
        else if (Poll.StartTime > DateTime.Now)
            _startsInTimer.Start();
        await base.OnInitializedAsync();
    }

    private void CountDownTimeLimit(object source, ElapsedEventArgs elapsedEventArgs)
    {
        var distance = timeFinished - DateTime.Now;
        if (distance is null) return;
        timeLimitDays = distance.Value.Days;
        timeLimitHours = distance.Value.Hours;
        timeLimitMinutes = distance.Value.Minutes;
        timeLimitSeconds = distance.Value.Seconds;

        if (timeLimitDays <= 0 && timeLimitHours <= 0 && timeLimitMinutes <= 0 && timeLimitSeconds <= 0)
        {
            _timeLimitTimer.Stop();
            Poll.IsComplete = true;
            InvokeAsync(PollComplete.InvokeAsync);
        }

        InvokeAsync(StateHasChanged);
    }

    private void CountDownStartsIn(object source, ElapsedEventArgs elapsedEventArgs)
    {
        var distance = Poll.StartTime - DateTime.Now;
        startsInDays = distance.Days;
        startsInHours = distance.Hours;
        startsInMinutes = distance.Minutes;
        startsInSeconds = distance.Seconds;

        if (startsInDays <= 0 && startsInHours <= 0 && startsInMinutes <= 0 && startsInSeconds <= 0)
        {
            _startsInTimer.Stop();
            Poll.HasStarted = true;
            _timeLimitTimer.Start();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timeLimitTimer.Elapsed -= new ElapsedEventHandler(CountDownTimeLimit);
        _startsInTimer.Elapsed -= new ElapsedEventHandler(CountDownStartsIn);
    }
}

<style>

    .divider {
        color: #000;
    }

    .clock-text {
        font-size: 1em;
        font-weight: 700;
        margin-top: .35em;
    }

    .times {
        display: flex;
        justify-content: space-evenly;
        position: relative;
    }

    .timer {
        flex-direction: column;
        display: flex;
        width: 50%;
        margin: 0 auto;
        border: 2px solid #000;
        padding: 10px;
        border-radius: 6px;
        box-shadow: inset 0 0 2.5px #000, inset 0 0 5px #000, inset 0 0 7.5px #000;
        background-image: linear-gradient( 190deg, rgba(217, 27, 66, 0.2) 30%, rgba(69, 196, 150, 0.2) 60%);
    }

    .time-unit-day {
        font-weight: 700;
        font-size: 1.25em;
        font-weight: 900;
        letter-spacing: .25em;
        text-shadow: 2px 2px 5px #000;
    }

    .time-unit-day::before {
        font-weight: 700;
        content: "Days";
        position: absolute;
        top: -1.75em;
        transform: translateX(-4px);
        text-align: center;
        font-size: .75em;
        letter-spacing: 0;
        text-transform: uppercase;
    }

    .time-unit-hour {
        font-weight: 700;
        font-size: 1.25em;
        font-weight: 900;
        letter-spacing: .25em;
        text-shadow: 2px 2px 5px #000;
    }

    .time-unit-hour::before {
        font-weight: 700;
        content: "Hours";
        position: absolute;
        top: -1.75em;
        transform: translateX(-9px);
        text-align: center;
        font-size: .75em;
        letter-spacing: 0;
        text-transform: uppercase;

    }

    .time-unit-min {
      font-weight: 700;
      font-size: 1.25em;
      font-weight: 900;
      letter-spacing: .25em;
      text-shadow: 2px 2px 5px #000;
    }

    .time-unit-min::before {
        font-weight: 700;
        content: "Mins";
        position: absolute;
        top: -1.75em;
        transform: translateX(-4px);
        text-align: center;
        font-size: .75em;
        letter-spacing: 0;
        text-transform: uppercase;
    }

    .time-unit-sec {
        font-weight: 900;
        font-size: 1.25em;
        letter-spacing: .25em;
        text-shadow: 2px 2px 5px #000;
    }

    .time-unit-sec::before {
        font-weight: 700;
        content: "Secs";
        position: absolute;
        top: -1.75em;
        transform: translateX(-3px);
        text-align: center;
        font-size: .75em;
        letter-spacing: 0;
        text-transform: uppercase;
    }

    .time-text {
        margin-bottom: 3em;
        font-weight: 700;
    }

    @@media(max-width: 991px) {
        .timer {
            width: 75%;
        }
    }

    @@media(max-width: 360px) {
        .timer {
            width: 95%;
        }
    }

    @@media(max-width: 300px) {
        .time-unit-min::before {
            transform: translateX(-2px);
        }
    }

</style>
