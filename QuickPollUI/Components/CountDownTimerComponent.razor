@implements IDisposable
<div class="timer">

    @if(!Poll.IsComplete)
    {
        if(Poll.TimeLimit is not null && Poll.StartTime < DateTime.Now)
        {
            <p class="time-text">TIME LEFT</p>
            <div class="times">
                <p class="time-unit-day">  @timeLimitDays.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-hour">  @timeLimitHours.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-min">   @timeLimitMinutes.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-sec">  @timeLimitSeconds.ToString("00") </p>
            </div>
        }
        else if (Poll.TimeLimit is not null && Poll.StartTime > DateTime.Now)
        {
            <p class="time-text">STARTS IN</p>
            <div class="times">
                <p class="time-unit-day">  @startsInDays.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-hour">  @startsInHours.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-min">  @startsInMinutes.ToString("00") </p>
                <p class="divider">|</p>
                <p class="time-unit-sec">  @startsInSeconds.ToString("00") </p>
            </div>
        }
        else
        {
            <p class="clock-text">NO TIME LIMIT</p>
        }
    }

    else
    {
        <p class="clock-text">POLL FINISHED</p>
    }

</div>

@code {
    [Parameter]
    public PollModel Poll { get; set; }

    [Parameter]
    public EventCallback PollComplete { get; set; }

    [Parameter]
    public EventCallback PollHasStarted { get; set; }

    private Timer _timeLimitTimer = new(1000);

    private Timer _startsInTimer = new(1000);

    private int timeLimitDays, timeLimitHours, timeLimitMinutes, timeLimitSeconds;

    private int startsInDays, startsInHours, startsInMinutes, startsInSeconds;

    private DateTime? timeFinished => Poll.TimeLimit is not null ? Poll.StartTime + Poll.TimeLimit : null;

    protected override async Task OnInitializedAsync()
    {

        _timeLimitTimer.Elapsed += new ElapsedEventHandler(CountDownTimeLimit);
        _startsInTimer.Elapsed += new ElapsedEventHandler(CountDownStartsIn);
        if (Poll.StartTime < DateTime.Now)
        {
            Poll.HasStarted = true;
            _timeLimitTimer.Start();
        }
        else if (Poll.StartTime > DateTime.Now)
            _startsInTimer.Start();
        await base.OnInitializedAsync();
    }

    private void CountDownTimeLimit(object source, ElapsedEventArgs elapsedEventArgs)
    {
        var distance = timeFinished - DateTime.Now;
        if (distance is null) return;
        timeLimitDays = distance.Value.Days;
        timeLimitHours = distance.Value.Hours;
        timeLimitMinutes = distance.Value.Minutes;
        timeLimitSeconds = distance.Value.Seconds;

        if (timeLimitDays <= 0 && timeLimitHours <= 0 && timeLimitMinutes <= 0 && timeLimitSeconds <= 0)
        {
            _timeLimitTimer.Stop();
            Poll.IsComplete = true;
            InvokeAsync(PollComplete.InvokeAsync);
        }

        InvokeAsync(StateHasChanged);
    }

    private void CountDownStartsIn(object source, ElapsedEventArgs elapsedEventArgs)
    {
        var distance = Poll.StartTime - DateTime.Now;
        startsInDays = distance.Days;
        startsInHours = distance.Hours;
        startsInMinutes = distance.Minutes;
        startsInSeconds = distance.Seconds;

        if (startsInDays <= 0 && startsInHours <= 0 && startsInMinutes <= 0 && startsInSeconds <= 0)
        {
            _startsInTimer.Stop();
            Poll.HasStarted = true;
            _timeLimitTimer.Start();
            InvokeAsync(PollHasStarted.InvokeAsync);
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timeLimitTimer.Dispose();
        _startsInTimer.Dispose();
    }
}

