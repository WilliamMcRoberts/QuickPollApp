@inject IPollManager _pollManager
@inject IUnitOfWork _unitOfWork
@inject NavigationManager _nav
@inject IJSRuntime JSRuntime
@inject IMongoPollData _pollData



<FlyTransition Duration="1000" Distance="25">
        <Card >
            <div  class="poll">
                <h3 class="question-text">@Poll.Question</h3>
                <p>Total Votes: @Poll.OptionsList.GetTotalVotes()</p>

                <div class="timer-container">
                    <CountDownTimerSimpleComponent Poll="@Poll" PollComplete="HandlePollComplete" PollHasStarted="HandlePollHasStarted" />
                </div>

                @foreach (var option in Poll.OptionsList)
                {
                    <Tooltip Text="@GetTooltipText(option)" BgColor="#f0f">
                        <div @onclick="(() => VoteOrUndoVoteForOption(option))" style="background: @GetAnswerBackgroundColor(option);" class="answer">
                            <div class="percent @GetPercentClass(option)" style="width: @(option.PollOptionVotes.GetPercentage(Poll.OptionsList.GetTotalVotes()))%"></div>
                            <span class="percent-block">
                                <div class="option-text"> @option.PollOptionName | @option.PollOptionVotes @(option.PollOptionVotes != 1 ? "Votes" : "Vote")</div>
                                <div class="percent-text" style="color: @GetPercentTextColor(option)">@(option.PollOptionVotes.GetPercentage(Poll.OptionsList.GetTotalVotes()))%</div>
                            </span>
                        </div>
                    </Tooltip>
                }
            </div>
            <div class="delete-details">
                @if(Poll.PollCreatorId == LoggedInUser.UserId)
                {
                    <Button 
                        Type="button"
                        Disabled="@(Poll.PollCreatorId != LoggedInUser?.UserId)" 
                        HandleClick="(() => DeletePoll(Poll, LoggedInUser))">
                        Delete
                    </Button>
                }
                <Button 
                    Type="button"
                    HandleClick="(() => GoToPollDetailsPage(Poll.PollId))" 
                    ClassType="secondary"> 
                    Details 
                </Button>
            </div>
        </Card>
</FlyTransition>

@code {
    [CascadingParameter]
    public PollModel Poll { get; set; }

    [CascadingParameter]
    public UserModel LoggedInUser { get; set; }

    private async Task VoteOrUndoVoteForOption(PollOptionModel pollOption) =>
        await _pollManager.VoteOrUndoVoteForOption(pollOption, Poll, LoggedInUser);

    private async Task DeletePoll(PollModel poll, UserModel loggedInUser) =>
        await _pollManager.DeletePoll(poll, loggedInUser);

    private string GetAnswerBackgroundColor(PollOptionModel option) =>
        Poll.OptionsList.IndexOf(option) % 2 == 0 ? "rgba(217, 27, 66, 0.2)" : "rgba(69, 196, 150, 0.2)";

    private string GetPercentTextColor(PollOptionModel option) =>
        Poll.OptionsList.IndexOf(option) % 2 == 0 ? "#d91b42" : "#45c496";

    private string GetPercentClass(PollOptionModel option) =>
        Poll.OptionsList.IndexOf(option) % 2 == 0 ? "percent-even" : "percent-odd";

    private string GetTooltipText(PollOptionModel option) =>
        option.GetTooltipText(Poll, LoggedInUser);

    private void GoToPollDetailsPage(Guid pollId) =>
        _nav.NavigateTo($"/polls/{pollId}");

    private async Task HandlePollComplete()
    {
        Poll.IsComplete = true;
        await _pollData.CreateOneAsync(Poll);
        //await _unitOfWork.Polls.CreateOneAsync(Poll);
        await _pollManager.UpdatePoll(Poll);
    }

    private async Task HandlePollHasStarted()
    {
        Poll.HasStarted = true;
        await _pollManager.UpdatePoll(Poll);
    }
}

<style>

    .percent {
        height: 100%;
        position: absolute;
        box-sizing: border-box;
        transition: .25s ease;
    }

    .percent-block {
        display: flex;
        justify-content: space-between;
        padding: 10px 20px;
    }

    .answer {
        cursor: pointer;
        margin: .25em auto;
        position: relative;
    }

    .percent-even {
        background: rgba(217, 27, 66, 0.3);
        border-left: 4px solid #d91b42;
    }

    .percent-odd {
        background: rgba(69, 196, 150, 0.3);
        border-left: 4px solid #45c496;
    }

    p {
        font-size: 14px;
        color: #aaa;
    }

    .option-text {
        font-weight: 700;
        font-family: 'Chakra Petch', sans-serif;
        color: #fff;
        text-shadow: 0 1px 1px #000, 0 1px 2px #000, 0 1px 3px #000, 0 1px 4px #000, 0 1px 5px #000, 0 1px 6px #000, 0 1px 7px #000;
    }

    .percent-text {
        font-weight: 900;
        text-shadow: 1px 2px 1px rgba(0, 0, 0, 0.8), 1px 2px 2px rgba(0, 0, 0, 0.8), 1px 2px 3px rgba(0, 0, 0, 0.8), 1px 2px 4px rgba(0, 0, 0, 0.8);
        letter-spacing: 1px;
    }

    .question-text {
        font-family: 'Chakra Petch', sans-serif;
    }

    .timer-container {
        position: absolute;
        bottom: -.5em;
        right: .5em;
    }

    .option-votes {
        display: flex;
        justify-content: space-between;
    }

    .poll {
        margin-bottom: 3em;
    }

    .delete-details {
        text-align: center;
        position: absolute;
        bottom: 10px;
        display:flex;
        justify-content: space-between;
    }

    h3 {
        margin: 0 auto;
        color: #555;
    }

    @@media(max-width: 650px) {
        .percent-block {
            height: 4em;
        }

        .percent-text {
            margin-top: .5em;
        }
    }

    @@media(max-width: 420px) {
        .percent-block {
            height: 6em;
        }

        .percent-text {
            margin-top: 1.5em;
        }
    }

    @@media(max-width: 520px) {
        .timer-container {
            margin: 0 auto;
            text-align: center;
            position: relative;
            display: flex;
            justify-content:center;
        }
    }

</style>
