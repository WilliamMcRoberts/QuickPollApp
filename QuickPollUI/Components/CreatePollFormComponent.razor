@inject IPollManager _pollManager
@inject ILogger<CreatePollFormComponent> _logger
@inject IMongoUserData _userData
@implements IDisposable

<div class="form-div">

    <div class="error" style="display: @( duplicateOptions ? "block" : "none");"> * Duplicate options are not allowed * </div>

    <div class="form-field">
        <label>Question ❔</label>
        <input class="form-control input" id="question" @bind="@poll.Question" @bind:event="oninput"/>
        <div class="error" style="display: @( string.IsNullOrWhiteSpace(poll.Question) && questionLengthBad ? "block" : "none");"> * Required * </div>
    </div>

    <div class="option-btn-container">
        <Button 
            ClassType="add-option" 
            HandleClick="AddOption">
            <span class="plus"> ➕ </span>
            <span class="option-btn-text">Option</span>
        </Button>
    </div>

    <div class="options">
        @foreach(var pollOption in poll.OptionsList)
        {
            <div class="form-field">
                <div class="remove-option-btn-container">
                    <Button Disabled="@(poll.OptionsList.Count < 3)"
                        ClassType="remove"
                        HandleClick="(() => RemoveOption(pollOption))">
                        ❌
                    </Button>
                </div>
                <label>Option #️ @(poll.OptionsList.IndexOf(pollOption) + 1) </label>
                <input class="form-control input" @bind="poll.OptionsList[poll.OptionsList.IndexOf(pollOption)].PollOptionName" @bind:event="oninput"/>
                <div class="error" style="display: @(string.IsNullOrWhiteSpace(pollOption.PollOptionName) && optionLengthBad ? "block" : "none")">* Required *</div>
            </div>
        }
    </div>
    <div class="form-field time-field">

        <div class="time">
            <label> <span class="clock"> 🕰️ </span> Limit</label>
            <select style="color: @(noTimeLimit ? "#aaa" : "#000")" class="form-control" @bind="poll.TimeLimit" disabled="@noTimeLimit"> 
                <option value="@TimeSpan.FromMinutes(1)">1 min</option>
                <option value="@TimeSpan.FromMinutes(5)">5 min</option>
                <option value="@TimeSpan.FromMinutes(15)">15 min</option>
                <option value="@TimeSpan.FromMinutes(30)">30 min</option>
                <option value="@TimeSpan.FromHours(1)">1 hour</option>
                <option value="@TimeSpan.FromHours(1.5)">1.5 hours</option>
                <option value="@TimeSpan.FromHours(2)">2 hours</option>
                <option value="@TimeSpan.FromHours(3)">3 hours</option>
                <option value="@TimeSpan.FromHours(4)">4 hours</option>
                <option value="@TimeSpan.FromHours(6)">6 hours</option>
                <option value="@TimeSpan.FromHours(6)">8 hours</option>
                <option value="@TimeSpan.FromHours(12)">12 hours</option>
                <option value="@TimeSpan.FromHours(18)">18 hours</option>
                <option value="@TimeSpan.FromDays(1)">1 Day</option>
                <option value="@TimeSpan.FromDays(2)">2 Days</option>
                <option value="@TimeSpan.FromDays(3)">3 Days</option>
                <option value="@TimeSpan.FromDays(4)">4 Day</option>
                <option value="@TimeSpan.FromDays(5)">5 Days</option>
                <option value="@TimeSpan.FromDays(6)">6 Days</option>
                <option value="@TimeSpan.FromDays(7)">7 Days</option>
            </select>
            <div class="checkbox-container">
                <label class="checkbox-label">No Limit</label>
                <input class="checkbox-input" type="checkbox" @bind="@noTimeLimit" />
            </div>
        </div>

        <div class="time">
            <label>Start <span class="clock"> 🕰️ </span></label>
            <input style="color: @(startImmediately ? "#aaa" : "#000")" disabled="@startImmediately" class="form-control start input" type="datetime-local" @bind="poll.StartTime" max="2023-07-01T00:00" />
            <div class="checkbox-container">
                <label class="checkbox-label">Start Now</label>
                <input class="checkbox-input" type="checkbox" @bind="@startImmediately"/>
            </div>
        </div>

    </div>

    <Button 
        ClassType="secondary" 
        UseMouseEventArgs="true" 
        HandleClickWithMouseArgs="((mouseArgs) => ShowModal(mouseArgs))"> 
        Create Poll 
    </Button>
</div>

@code {
    [Parameter]
    public EventCallback HandleAdd { get; set; }

    [CascadingParameter]
    public UserModel LoggedInUser { get; set; }

    [CascadingParameter]
    public ModalWrapper ModalWrapperComponent { get; set; }

    bool optionLengthBad;
    bool questionLengthBad;
    bool duplicateOptions;
    bool startImmediately = true;
    bool noTimeLimit = true;

    ModalWrapper.ModalClosed modalClosed;

    PollModel poll = new()
    {
        OptionsList = new()
        {
            new PollOptionModel(),
            new PollOptionModel()
        },
        StartTime = DateTime.Now,
        TimeLimit = TimeSpan.FromSeconds(0)
    };

    protected override void OnInitialized() 
    {
        modalClosed = new ModalWrapper.ModalClosed(ModalWrapperComponent_ModalClosed);

        ModalWrapperComponent.OnModalClosed += modalClosed;
    }

    public async void ModalWrapperComponent_ModalClosed() => await HandleSubmit();

    public void ShowModal(MouseEventArgs mouseArgs)
    {
        ResetBooleans();

        ValidatePollData();

        if (questionLengthBad || optionLengthBad || duplicateOptions) return;

        var ParameterArguments = new Dictionary<string, object>
        {
            { "CreatedPoll" , poll },
            { "LinkCopied", false },
            { "PollIdCopied", false }
        };

        ModalWrapperComponent.ShowModal(mouseArgs, typeof(PollLinkInfoComponent), ParameterArguments, false);
    }

    public async Task HandleSubmit()
    {
        SetPollData();

        LoggedInUser.PollIds.Add(poll.PollId);
        await _userData.ReplaceOneAsync(LoggedInUser.UserId, LoggedInUser, "UserId");
        await _pollManager.AddPoll(poll);

        poll = new()
        {
            OptionsList = new()
            {
                new PollOptionModel(),
                new PollOptionModel()
            },
            StartTime = DateTime.Now,
            TimeLimit = TimeSpan.FromSeconds(0)
        };

        await HandleAdd.InvokeAsync();
    }

    private void ValidatePollData()
    {
        if (string.IsNullOrWhiteSpace(poll.Question)) questionLengthBad = true;

        foreach(var pollOption in poll.OptionsList)
        {
            if (poll.OptionsList.Contains(poll.OptionsList.Where(po => po.PollOptionName == pollOption.PollOptionName
                && po.PollOptionId != pollOption.PollOptionId).FirstOrDefault()!)) { duplicateOptions = true; }

            if(string.IsNullOrWhiteSpace(pollOption.PollOptionName)) optionLengthBad = true;
        }
    }

    private void SetPollData()
    {
        if(startImmediately)
        {
            poll.HasStarted = true;
            poll.StartTime = DateTime.Now;
        }
        poll.TimeLimit = noTimeLimit ? null : poll.TimeLimit;
        poll.PollCreatorId = LoggedInUser.UserId;
    }

    private void RemoveOption(PollOptionModel pollOption)
    {
        if (poll.OptionsList.Count > 2)
            poll.OptionsList.Remove(pollOption);
    }

    private void ResetBooleans() => (optionLengthBad, questionLengthBad, duplicateOptions) = (false, false, false);

    private void AddOption() => poll.OptionsList.Add(new PollOptionModel() { PollOptionId = Guid.NewGuid() });

    public void Dispose() => ModalWrapperComponent.OnModalClosed -= modalClosed;
}

<style>

    label {
        font-weight: 700;
    }

    .remove-option-btn-container {
        position: absolute;
        margin-top: .25em;
    }

    .plus {
        margin: 0;
        
    }

    .checkbox-input {
        transform: scale(1.5);
        margin: 0 .5em;
        accent-color: #BF40BF;
        width: auto;
    }

    .checkbox-container {
        display: flex;
        justify-content: center;
    }

    .checkbox-label {
        font-size: .75em;
        margin: .5em .25em;
        width: auto;
    }

    option {
        width: 70%;
    }

    .option-btn-container {
        position:absolute;
        right: 21%;
    }

    .start {
        font-size: .75em;
        height: 40px;
        padding-top: .5em;
    }

    select {
        border-radius: 6px;
        box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.8);
        border: none;
        height: 40px;
    }

    .time {
        width: 25%;
        margin-bottom: 1em;
    }

    .time-field {
        display: flex;
        width: 90%;
        justify-content: space-evenly;
    }

    .error {
        color: #d91b42;
        font-weight: 700;
        font-size: 12px;
        margin-top: .25em;
    }

    .form-div {
        width: 70%;
        margin: 0 auto;
        text-align: center;
    }

    .form-field {
        margin: .5em auto;
        color: #aaa;
        font-size: 18px;
        width: 100%;
    }

    .input {
        width: 100%;
        border-radius: 6px;
        box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.8);
    }

    label {
        margin: 10px auto;
        text-align: left;
    }

    .options {
        display: flex;
        flex-direction: column;
        width: 85%;
        margin: 0 auto;
    }

    @@media(max-width: 600px) {
        .form-div {
            width: 100%;
        }

        .option-btn-container {
            right: 10%;
        }
    }

    @@media(max-width: 410px) {
        .clock {
            display: none;
        }

        .option-btn-text {
            display: none;
        }
    }

</style>