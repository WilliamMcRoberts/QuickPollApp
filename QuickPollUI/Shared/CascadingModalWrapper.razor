
<CascadingValue Value="this">
    <div class="child-content-box">
        @ChildContent
    </div>
    <div class="Modal" id="Modal" style="@("display:" + ( showModal ? $"block; {modalPosition}" : "none;"))">
        @if (!IsLogin)
        {
            <div class="d-flex justify-content-end flex-column">
                <div class="d-flex justify-content-between">
                    <label class="confirmation-text">I have copied and saved my poll link</label>
                    <input class="checkbox-modal" type="checkbox" @bind="@copyLinkConfirmation" />
                </div>
                <div class="d-flex justify-content-between">
                    <label class="confirmation-text">I have copied and saved my poll id</label>
                    <input class="checkbox-modal" type="checkbox" @bind="@copyPollIdConfirmation" />
                </div>
            </div>
            <button class="close-modal-button" @onclick="CloseModal"> ❌ </button>
        }
        else
        {
            <h3 class="login-text">Please login or sign up to continue</h3>
        }
        <DynamicComponent Type="ComponentType" Parameters="ComponentParameters" />
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public bool IsLogin { get; set; }

    public delegate void ModalClosed();
    public event ModalClosed OnModalClosed;

    private bool showModal;
    private string modalPosition;
    private Type ComponentType = typeof(LoginComponent);
    private Dictionary<string, object> ComponentParameters;
    private bool copyLinkConfirmation;
    private bool copyPollIdConfirmation;

    public void ShowModal(Type componentType, 
        Dictionary<string, object> componentParameters, bool isLogin)
    {
        modalPosition = $"position: fixed; left: 50%; top: 50% ; transform: translate(-50%,-50%);";
        ComponentType = componentType;
        ComponentParameters = componentParameters;
        IsLogin = isLogin;
        showModal = true;

        StateHasChanged();
    }

    public void CloseModal()
    {
        if (!copyLinkConfirmation || !copyPollIdConfirmation) return;

        showModal = false;
        copyLinkConfirmation = false;
        copyPollIdConfirmation = false;
        OnModalClosed();
        StateHasChanged();
    }
}

<style>

    .login-text {
        font-weight: 700;
        color: #fff;
    }

    .confirmation-text {
        font-weight: 700;
        color: #fff;
        margin: .5em auto;
    }

    .checkbox-modal {
        margin: 0 1em;
        accent-color: #BF40BF;
        transform: scale(2);
        cursor: pointer;
    }

    .Modal {
        background: rgba(0,0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 3px solid #BF40BF;
        width: 40%;
        padding: 2em;
        border-radius: 6px;
        box-shadow: inset 0 0 7.5px 3px rgba(0,0, 0, 0.8);
    }

    .child-content-box {
        backdrop-filter: @(showModal ? "blur(10px)" : "none");
        background-color: @(showModal ? "rgba(0,0,0)" : "transparent");
        opacity: @(showModal ? "0.2" : "1");
    }

    @@media(max-width: 680px) {
        .Modal {
            width: 60%;
        }
    }

    .close-modal-button {
        position: absolute;
        margin: 0 auto;
        color: #000;
        background: none;
        bottom: .5em;
        right: .5em;
        border: none;
        font-size: 25px;
        font-weight: 900;
        text-shadow: 0 0 2.5px #BF40BF, 0 0 5px #BF40BF, 0 0 7.5px #BF40BF, 0 0 10px #BF40BF, 0 0 20px #BF40BF, 0 0 40px #BF40BF;
    }

        .close-modal-button:hover {
            text-shadow: 0 0 2.5px white, 0 0 5px white, 0 0 7.5px white;
        }

</style>
